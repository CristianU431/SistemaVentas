//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClienteWeb.srTiendas {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="srTiendas.wsTiendasSoap")]
    public interface wsTiendasSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Listar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Listar();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Listar", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ListarAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Agregar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] Agregar(string Stor_id, string Stor_name, string Stor_address, string City, string State, string Zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Agregar", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> AgregarAsync(string Stor_id, string Stor_name, string Stor_address, string City, string State, string Zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Actualizar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] Actualizar(string Stor_id, string Stor_name, string Stor_address, string City, string State, string Zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Actualizar", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ActualizarAsync(string Stor_id, string Stor_name, string Stor_address, string City, string State, string Zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Eliminar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] Eliminar(string Stor_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Eliminar", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> EliminarAsync(string Stor_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Buscar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Buscar(string texto, string criterio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Buscar", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> BuscarAsync(string texto, string criterio);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface wsTiendasSoapChannel : ClienteWeb.srTiendas.wsTiendasSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class wsTiendasSoapClient : System.ServiceModel.ClientBase<ClienteWeb.srTiendas.wsTiendasSoap>, ClienteWeb.srTiendas.wsTiendasSoap {
        
        public wsTiendasSoapClient() {
        }
        
        public wsTiendasSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public wsTiendasSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public wsTiendasSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public wsTiendasSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet Listar() {
            return base.Channel.Listar();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ListarAsync() {
            return base.Channel.ListarAsync();
        }
        
        public string[] Agregar(string Stor_id, string Stor_name, string Stor_address, string City, string State, string Zip) {
            return base.Channel.Agregar(Stor_id, Stor_name, Stor_address, City, State, Zip);
        }
        
        public System.Threading.Tasks.Task<string[]> AgregarAsync(string Stor_id, string Stor_name, string Stor_address, string City, string State, string Zip) {
            return base.Channel.AgregarAsync(Stor_id, Stor_name, Stor_address, City, State, Zip);
        }
        
        public string[] Actualizar(string Stor_id, string Stor_name, string Stor_address, string City, string State, string Zip) {
            return base.Channel.Actualizar(Stor_id, Stor_name, Stor_address, City, State, Zip);
        }
        
        public System.Threading.Tasks.Task<string[]> ActualizarAsync(string Stor_id, string Stor_name, string Stor_address, string City, string State, string Zip) {
            return base.Channel.ActualizarAsync(Stor_id, Stor_name, Stor_address, City, State, Zip);
        }
        
        public string[] Eliminar(string Stor_id) {
            return base.Channel.Eliminar(Stor_id);
        }
        
        public System.Threading.Tasks.Task<string[]> EliminarAsync(string Stor_id) {
            return base.Channel.EliminarAsync(Stor_id);
        }
        
        public System.Data.DataSet Buscar(string texto, string criterio) {
            return base.Channel.Buscar(texto, criterio);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> BuscarAsync(string texto, string criterio) {
            return base.Channel.BuscarAsync(texto, criterio);
        }
    }
}
